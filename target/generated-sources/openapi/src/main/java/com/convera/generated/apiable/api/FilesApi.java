/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.convera.generated.apiable.api;

import com.convera.generated.apiable.model.UploadFileRequest;
import com.convera.generated.apiable.model.UploadFileResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-23T11:14:59.778621+02:00[Europe/Zurich]")
@Validated
@Tag(name = "Files", description = "Files are a way to store files in the system.")
public interface FilesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/files/upload : Upload a file
     * Expecting the request to be a multipart/form-data
     *
     * @param uploadFileRequest  (required)
     * @param xAPIVersion  (optional)
     * @return Returns the url of the uploaded file (status code 202)
     */
    @Operation(
        operationId = "uploadFile",
        summary = "Upload a file",
        tags = { "Files" },
        responses = {
            @ApiResponse(responseCode = "202", description = "Returns the url of the uploaded file", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UploadFileResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "oauth-cc", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/files/upload",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UploadFileResponse> uploadFile(
        @Parameter(name = "UploadFileRequest", description = "", required = true) @Valid @RequestBody UploadFileRequest uploadFileRequest,
        @Parameter(name = "X-API-Version", description = "") @RequestHeader(value = "X-API-Version", required = false) String xAPIVersion
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"url\" : \"url\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
