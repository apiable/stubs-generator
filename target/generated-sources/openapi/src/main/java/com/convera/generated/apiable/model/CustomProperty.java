package com.convera.generated.apiable.model;

import java.net.URI;
import java.util.Objects;
import com.convera.generated.apiable.model.BooleanCustomProperty;
import com.convera.generated.apiable.model.NumberCustomProperty;
import com.convera.generated.apiable.model.StringCustomProperty;
import com.convera.generated.apiable.model.TextCustomProperty;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * List of available custom properties of the plan.
 */

@Schema(name = "CustomProperty", description = "List of available custom properties of the plan.")
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = BooleanCustomProperty.class, name = "BooleanCustomProperty"),
  @JsonSubTypes.Type(value = NumberCustomProperty.class, name = "NumberCustomProperty"),
  @JsonSubTypes.Type(value = StringCustomProperty.class, name = "StringCustomProperty"),
  @JsonSubTypes.Type(value = TextCustomProperty.class, name = "TextCustomProperty")
})

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-23T11:14:59.778621+02:00[Europe/Zurich]")
public class CustomProperty {

  @JsonProperty("required")
  private Boolean required;

  @JsonProperty("readOnly")
  private Boolean readOnly;

  @JsonProperty("description")
  private String description;

  /**
   * The type of the custom property
   */
  public enum TypeEnum {
    STRING("STRING"),
    
    NUMBER("NUMBER"),
    
    BOOLEAN("BOOLEAN"),
    
    TEXT("TEXT");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  @JsonProperty("type")
  private TypeEnum type;

  @JsonProperty("id")
  private Object id;

  @JsonProperty("includeInSubscriptionWizard")
  private Boolean includeInSubscriptionWizard;

  @JsonProperty("display")
  private String display;

  public CustomProperty required(Boolean required) {
    this.required = required;
    return this;
  }

  /**
   * Whether the custom property is required
   * @return required
  */
  
  @Schema(name = "required", description = "Whether the custom property is required", required = false)
  public Boolean getRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }

  public CustomProperty readOnly(Boolean readOnly) {
    this.readOnly = readOnly;
    return this;
  }

  /**
   * Whether the custom property is read only
   * @return readOnly
  */
  
  @Schema(name = "readOnly", description = "Whether the custom property is read only", required = false)
  public Boolean getReadOnly() {
    return readOnly;
  }

  public void setReadOnly(Boolean readOnly) {
    this.readOnly = readOnly;
  }

  public CustomProperty description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the custom property
   * @return description
  */
  
  @Schema(name = "description", description = "The description of the custom property", required = false)
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public CustomProperty type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the custom property
   * @return type
  */
  
  @Schema(name = "type", description = "The type of the custom property", required = false)
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public CustomProperty id(Object id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
  */
  
  @Schema(name = "id", required = false)
  public Object getId() {
    return id;
  }

  public void setId(Object id) {
    this.id = id;
  }

  public CustomProperty includeInSubscriptionWizard(Boolean includeInSubscriptionWizard) {
    this.includeInSubscriptionWizard = includeInSubscriptionWizard;
    return this;
  }

  /**
   * Whether the custom property is included in the subscription wizard
   * @return includeInSubscriptionWizard
  */
  
  @Schema(name = "includeInSubscriptionWizard", description = "Whether the custom property is included in the subscription wizard", required = false)
  public Boolean getIncludeInSubscriptionWizard() {
    return includeInSubscriptionWizard;
  }

  public void setIncludeInSubscriptionWizard(Boolean includeInSubscriptionWizard) {
    this.includeInSubscriptionWizard = includeInSubscriptionWizard;
  }

  public CustomProperty display(String display) {
    this.display = display;
    return this;
  }

  /**
   * The display name of the custom property
   * @return display
  */
  
  @Schema(name = "display", description = "The display name of the custom property", required = false)
  public String getDisplay() {
    return display;
  }

  public void setDisplay(String display) {
    this.display = display;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomProperty customProperty = (CustomProperty) o;
    return Objects.equals(this.required, customProperty.required) &&
        Objects.equals(this.readOnly, customProperty.readOnly) &&
        Objects.equals(this.description, customProperty.description) &&
        Objects.equals(this.type, customProperty.type) &&
        Objects.equals(this.id, customProperty.id) &&
        Objects.equals(this.includeInSubscriptionWizard, customProperty.includeInSubscriptionWizard) &&
        Objects.equals(this.display, customProperty.display);
  }

  @Override
  public int hashCode() {
    return Objects.hash(required, readOnly, description, type, id, includeInSubscriptionWizard, display);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomProperty {\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    includeInSubscriptionWizard: ").append(toIndentedString(includeInSubscriptionWizard)).append("\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

