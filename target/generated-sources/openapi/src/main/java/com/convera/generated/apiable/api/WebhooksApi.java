/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.convera.generated.apiable.api;

import com.convera.generated.apiable.model.WebhookConf;
import com.convera.generated.apiable.model.WebhookConfCreate;
import com.convera.generated.apiable.model.WebhookConfUpdate;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-23T11:14:59.778621+02:00[Europe/Zurich]")
@Validated
@Tag(name = "Webhooks", description = "")
public interface WebhooksApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/webhooks : Register a webhook
     * Subscribe to a webhook
     *
     * @param webhookConfCreate  (required)
     * @param xAPIVersion  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "create",
        summary = "Register a webhook",
        tags = { "Webhooks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WebhookConf.class))
            })
        },
        security = {
            @SecurityRequirement(name = "oauth-cc", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/webhooks",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<WebhookConf> create(
        @Parameter(name = "WebhookConfCreate", description = "", required = true) @Valid @RequestBody WebhookConfCreate webhookConfCreate,
        @Parameter(name = "X-API-Version", description = "") @RequestHeader(value = "X-API-Version", required = false) String xAPIVersion
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"authorization\" : \"authorization\", \"headers\" : { \"key\" : \"headers\" }, \"id\" : \"{}\", \"whsec\" : \"whsec\", \"events\" : [ \"SUBSCRIPTION_CREATED\", \"SUBSCRIPTION_CREATED\" ], \"url\" : \"url\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/webhooks/{id}/history : Retrieve the history of webhook results for the past 24 hours
     * Retrieve the history of webhook results for the past 24 hours
     *
     * @param id  (required)
     * @param xAPIVersion  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getPastWebhookHistory",
        summary = "Retrieve the history of webhook results for the past 24 hours",
        tags = { "Webhooks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            })
        },
        security = {
            @SecurityRequirement(name = "oauth-cc", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/webhooks/{id}/history",
        produces = { "application/json" }
    )
    default ResponseEntity<List<String>> getPastWebhookHistory(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") String id,
        @Parameter(name = "X-API-Version", description = "") @RequestHeader(value = "X-API-Version", required = false) String xAPIVersion
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/webhooks : Retrieve Registered Webhooks
     *
     * @param xAPIVersion  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "retrieve",
        summary = "Retrieve Registered Webhooks",
        tags = { "Webhooks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WebhookConf.class))
            })
        },
        security = {
            @SecurityRequirement(name = "oauth-cc", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/webhooks",
        produces = { "application/json" }
    )
    default ResponseEntity<List<WebhookConf>> retrieve(
        @Parameter(name = "X-API-Version", description = "") @RequestHeader(value = "X-API-Version", required = false) String xAPIVersion
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"authorization\" : \"authorization\", \"headers\" : { \"key\" : \"headers\" }, \"id\" : \"{}\", \"whsec\" : \"whsec\", \"events\" : [ \"SUBSCRIPTION_CREATED\", \"SUBSCRIPTION_CREATED\" ], \"url\" : \"url\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/webhooks/{id} : Retrieve a webhook by ID
     * Retrieve a specific webhook by its ID
     *
     * @param id The ID of the webhook to retrieve (required)
     * @param xAPIVersion  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "retrieveById",
        summary = "Retrieve a webhook by ID",
        tags = { "Webhooks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WebhookConf.class))
            })
        },
        security = {
            @SecurityRequirement(name = "oauth-cc", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/webhooks/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<WebhookConf> retrieveById(
        @Parameter(name = "id", description = "The ID of the webhook to retrieve", required = true) @PathVariable("id") String id,
        @Parameter(name = "X-API-Version", description = "") @RequestHeader(value = "X-API-Version", required = false) String xAPIVersion
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"authorization\" : \"authorization\", \"headers\" : { \"key\" : \"headers\" }, \"id\" : \"{}\", \"whsec\" : \"whsec\", \"events\" : [ \"SUBSCRIPTION_CREATED\", \"SUBSCRIPTION_CREATED\" ], \"url\" : \"url\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/webhooks/{id}/test : Test a webhook by ID
     * Send a test event to a specific webhook by its ID
     *
     * @param id The ID of the webhook to test (required)
     * @param xAPIVersion  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "testWebhookById",
        summary = "Test a webhook by ID",
        tags = { "Webhooks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            })
        },
        security = {
            @SecurityRequirement(name = "oauth-cc", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/webhooks/{id}/test",
        produces = { "application/json" }
    )
    default ResponseEntity<String> testWebhookById(
        @Parameter(name = "id", description = "The ID of the webhook to test", required = true) @PathVariable("id") String id,
        @Parameter(name = "X-API-Version", description = "") @RequestHeader(value = "X-API-Version", required = false) String xAPIVersion
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/webhooks/{id} : Unregister a webhook
     * Unsubscribe from a webhook
     *
     * @param id  (required)
     * @param xAPIVersion  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "unsubscribe",
        summary = "Unregister a webhook",
        tags = { "Webhooks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        },
        security = {
            @SecurityRequirement(name = "oauth-cc", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/webhooks/{id}"
    )
    default ResponseEntity<Void> unsubscribe(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") String id,
        @Parameter(name = "X-API-Version", description = "") @RequestHeader(value = "X-API-Version", required = false) String xAPIVersion
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/webhooks/{id} : Update webhook
     * Update a webhook
     *
     * @param id  (required)
     * @param webhookConfUpdate  (required)
     * @param xAPIVersion  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "update",
        summary = "Update webhook",
        tags = { "Webhooks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WebhookConf.class))
            })
        },
        security = {
            @SecurityRequirement(name = "oauth-cc", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/webhooks/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<WebhookConf> update(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") String id,
        @Parameter(name = "WebhookConfUpdate", description = "", required = true) @Valid @RequestBody WebhookConfUpdate webhookConfUpdate,
        @Parameter(name = "X-API-Version", description = "") @RequestHeader(value = "X-API-Version", required = false) String xAPIVersion
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"authorization\" : \"authorization\", \"headers\" : { \"key\" : \"headers\" }, \"id\" : \"{}\", \"whsec\" : \"whsec\", \"events\" : [ \"SUBSCRIPTION_CREATED\", \"SUBSCRIPTION_CREATED\" ], \"url\" : \"url\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
