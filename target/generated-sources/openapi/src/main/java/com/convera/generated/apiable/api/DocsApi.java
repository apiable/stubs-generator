/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.convera.generated.apiable.api;

import com.convera.generated.apiable.model.DocumentationVersion;
import java.util.List;
import com.convera.generated.apiable.model.PatchObject;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-23T11:14:59.778621+02:00[Europe/Zurich]")
@Validated
@Tag(name = "Docs", description = "Docs are a way to store documentation in the system.")
public interface DocsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /api/docs/{docId} : Get the doc by id
     *
     * @param docId The documentation id (required)
     * @param xAPIVersion  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "findById3",
        summary = "Get the doc by id",
        tags = { "Docs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DocumentationVersion.class))
            })
        },
        security = {
            @SecurityRequirement(name = "oauth-cc", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/docs/{docId}",
        produces = { "application/json" }
    )
    default ResponseEntity<DocumentationVersion> findById3(
        @Parameter(name = "docId", description = "The documentation id", required = true) @PathVariable("docId") String docId,
        @Parameter(name = "X-API-Version", description = "") @RequestHeader(value = "X-API-Version", required = false) String xAPIVersion
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /api/docs/{docId} : Update the doc
     * The supported operation is replace, and the supported paths are url, version, name
     *
     * @param docId The documentation id (required)
     * @param patchObject  (required)
     * @param xAPIVersion  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "patchById",
        summary = "Update the doc",
        tags = { "Docs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DocumentationVersion.class))
            })
        },
        security = {
            @SecurityRequirement(name = "oauth-cc", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/docs/{docId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<DocumentationVersion> patchById(
        @Parameter(name = "docId", description = "The documentation id", required = true) @PathVariable("docId") String docId,
        @Parameter(name = "PatchObject", description = "", required = true) @Valid @RequestBody List<PatchObject> patchObject,
        @Parameter(name = "X-API-Version", description = "") @RequestHeader(value = "X-API-Version", required = false) String xAPIVersion
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
