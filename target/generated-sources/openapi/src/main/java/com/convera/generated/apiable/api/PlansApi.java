/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.convera.generated.apiable.api;

import com.convera.generated.apiable.model.DocumentationVersion;
import com.convera.generated.apiable.model.FindById21200Response;
import java.util.List;
import com.convera.generated.apiable.model.NotFoundException;
import com.convera.generated.apiable.model.PatchObject;
import com.convera.generated.apiable.model.Plan;
import com.convera.generated.apiable.model.PlanDocDetails;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-23T11:14:59.778621+02:00[Europe/Zurich]")
@Validated
@Tag(name = "Plans", description = "Plans are a way to group APIs and their documentation.")
public interface PlansApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/plans/apis/{integrationId}/docs : Create the api-level doc to all apis specified by the API integrationId
     * This endpoint will create the api-level doc of the specified api across all plans
     *
     * @param integrationId The API integrationId (required)
     * @param documentationVersion  (required)
     * @param xAPIVersion  (optional)
     * @return The created documentation for the specified APIs across all plans (status code 200)
     */
    @Operation(
        operationId = "createDocByApiIntegrationId1",
        summary = "Create the api-level doc to all apis specified by the API integrationId",
        tags = { "Plans" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The created documentation for the specified APIs across all plans", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DocumentationVersion.class))
            })
        },
        security = {
            @SecurityRequirement(name = "oauth-cc", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/plans/apis/{integrationId}/docs",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<List<DocumentationVersion>> createDocByApiIntegrationId1(
        @Parameter(name = "integrationId", description = "The API integrationId", required = true) @PathVariable("integrationId") String integrationId,
        @Parameter(name = "DocumentationVersion", description = "", required = true) @Valid @RequestBody DocumentationVersion documentationVersion,
        @Parameter(name = "X-API-Version", description = "") @RequestHeader(value = "X-API-Version", required = false) String xAPIVersion
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/plans/{id}/apis/{integrationId}/docs : Create the api-level doc to all apis specified by the API integrationId in the plan
     * This endpoint will create the api-level doc of the specified api in the plan
     *
     * @param id The plan id (required)
     * @param integrationId The API integrationId (required)
     * @param documentationVersion  (required)
     * @param xAPIVersion  (optional)
     * @return The created documentation for the specified APIs in the plan (status code 200)
     */
    @Operation(
        operationId = "createDocByPlanIdAndApiIntegrationId1",
        summary = "Create the api-level doc to all apis specified by the API integrationId in the plan",
        tags = { "Plans" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The created documentation for the specified APIs in the plan", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PlanDocDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "oauth-cc", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/plans/{id}/apis/{integrationId}/docs",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<PlanDocDetails> createDocByPlanIdAndApiIntegrationId1(
        @Parameter(name = "id", description = "The plan id", required = true) @PathVariable("id") String id,
        @Parameter(name = "integrationId", description = "The API integrationId", required = true) @PathVariable("integrationId") String integrationId,
        @Parameter(name = "DocumentationVersion", description = "", required = true) @Valid @RequestBody DocumentationVersion documentationVersion,
        @Parameter(name = "X-API-Version", description = "") @RequestHeader(value = "X-API-Version", required = false) String xAPIVersion
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"documentationPublic\" : true, \"apiLevelDocs\" : [ { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] }, { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] } ], \"documentationLevel\" : \"PLAN\", \"id\" : \"id\", \"planLevelDocs\" : [ { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] }, { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/plans/{id}/docs : Create the plan-level doc to the plan
     * This endpoint will create the plan-level doc of the specified plan
     *
     * @param id The plan id (required)
     * @param documentationVersion  (required)
     * @param xAPIVersion  (optional)
     * @return The created documentation for the specified plan (status code 200)
     */
    @Operation(
        operationId = "createDocByPlanIntegrationId1",
        summary = "Create the plan-level doc to the plan",
        tags = { "Plans" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The created documentation for the specified plan", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DocumentationVersion.class))
            })
        },
        security = {
            @SecurityRequirement(name = "oauth-cc", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/plans/{id}/docs",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<DocumentationVersion> createDocByPlanIntegrationId1(
        @Parameter(name = "id", description = "The plan id", required = true) @PathVariable("id") String id,
        @Parameter(name = "DocumentationVersion", description = "", required = true) @Valid @RequestBody DocumentationVersion documentationVersion,
        @Parameter(name = "X-API-Version", description = "") @RequestHeader(value = "X-API-Version", required = false) String xAPIVersion
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/plans/apis/{integrationId}/docs/{docId} : Delete an api level documentation from a plan
     * This endpoint will delete an api-level documentation entry from the specified plan and api. The documentation entry is identified by the given ID. The response includes the details of the deleted documentation entry.
     *
     * @param docId  (required)
     * @param integrationId  (required)
     * @param xAPIVersion  (optional)
     * @return Deleted documentation entry. (status code 200)
     */
    @Operation(
        operationId = "deleteAPILevelDocumentationWithoutPlanId",
        summary = "Delete an api level documentation from a plan",
        tags = { "Plans" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Deleted documentation entry.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PlanDocDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "oauth-cc", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/plans/apis/{integrationId}/docs/{docId}",
        produces = { "application/json" }
    )
    default ResponseEntity<PlanDocDetails> deleteAPILevelDocumentationWithoutPlanId(
        @Parameter(name = "docId", description = "", required = true) @PathVariable("docId") String docId,
        @Parameter(name = "integrationId", description = "", required = true) @PathVariable("integrationId") String integrationId,
        @Parameter(name = "X-API-Version", description = "") @RequestHeader(value = "X-API-Version", required = false) String xAPIVersion
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"documentationPublic\" : true, \"apiLevelDocs\" : [ { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] }, { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] } ], \"documentationLevel\" : \"PLAN\", \"id\" : \"id\", \"planLevelDocs\" : [ { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] }, { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/plans/{id}/apis/{integrationId}/docs/{docId} : Delete an api level documentation from a plan
     * This endpoint will delete an api-level documentation entry from the specified plan and api. The documentation entry is identified by the given ID. The response includes the details of the deleted documentation entry.
     *
     * @param id  (required)
     * @param docId  (required)
     * @param integrationId  (required)
     * @param xAPIVersion  (optional)
     * @return The deleted documentation entry. (status code 200)
     */
    @Operation(
        operationId = "deleteApiLevelDocumentationById",
        summary = "Delete an api level documentation from a plan",
        tags = { "Plans" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The deleted documentation entry.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PlanDocDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "oauth-cc", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/plans/{id}/apis/{integrationId}/docs/{docId}",
        produces = { "application/json" }
    )
    default ResponseEntity<PlanDocDetails> deleteApiLevelDocumentationById(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") String id,
        @Parameter(name = "docId", description = "", required = true) @PathVariable("docId") String docId,
        @Parameter(name = "integrationId", description = "", required = true) @PathVariable("integrationId") String integrationId,
        @Parameter(name = "X-API-Version", description = "") @RequestHeader(value = "X-API-Version", required = false) String xAPIVersion
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"documentationPublic\" : true, \"apiLevelDocs\" : [ { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] }, { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] } ], \"documentationLevel\" : \"PLAN\", \"id\" : \"id\", \"planLevelDocs\" : [ { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] }, { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/plans/{id}/docs/{docId} : Delete a plan level documentation from a plan
     * This endpoint will delete a plan-level documentation entry from the specified plan. The documentation entry is identified by the given ID. The response includes the details of the deleted documentation entry.
     *
     * @param id The plan id (required)
     * @param docId  (required)
     * @param xAPIVersion  (optional)
     * @return Deleted documentation entry. (status code 200)
     */
    @Operation(
        operationId = "deleteDocumentationById",
        summary = "Delete a plan level documentation from a plan",
        tags = { "Plans" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Deleted documentation entry.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PlanDocDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "oauth-cc", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/plans/{id}/docs/{docId}",
        produces = { "application/json" }
    )
    default ResponseEntity<PlanDocDetails> deleteDocumentationById(
        @Parameter(name = "id", description = "The plan id", required = true) @PathVariable("id") String id,
        @Parameter(name = "docId", description = "", required = true) @PathVariable("docId") String docId,
        @Parameter(name = "X-API-Version", description = "") @RequestHeader(value = "X-API-Version", required = false) String xAPIVersion
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"documentationPublic\" : true, \"apiLevelDocs\" : [ { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] }, { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] } ], \"documentationLevel\" : \"PLAN\", \"id\" : \"id\", \"planLevelDocs\" : [ { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] }, { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/plans : List all plans
     * Get a list of all plans that exist on the portal. Each plan includes detailed information such as the plan ID, name, description, and associated APIs.
     *
     * @param page Page number (optional)
     * @param size Number of items per page (optional)
     * @param sort Sort order (optional)
     * @param resolve Fields to resolve (optional)
     * @param search Search criteria (optional)
     * @param xAPIVersion  (optional)
     * @return Lists all plans that exist on the portal (status code 200)
     */
    @Operation(
        operationId = "findAll4",
        summary = "List all plans",
        tags = { "Plans" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lists all plans that exist on the portal", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Plan.class))
            })
        },
        security = {
            @SecurityRequirement(name = "oauth-cc", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/plans",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Plan>> findAll4(
        @Parameter(name = "page", description = "Page number") @Valid @RequestParam(value = "page", required = false) Integer page,
        @Parameter(name = "size", description = "Number of items per page") @Valid @RequestParam(value = "size", required = false) Integer size,
        @Parameter(name = "sort", description = "Sort order") @Valid @RequestParam(value = "sort", required = false) List<String> sort,
        @Parameter(name = "resolve", description = "Fields to resolve") @Valid @RequestParam(value = "resolve", required = false) List<String> resolve,
        @Parameter(name = "search", description = "Search criteria") @Valid @RequestParam(value = "search", required = false) List<String> search,
        @Parameter(name = "X-API-Version", description = "") @RequestHeader(value = "X-API-Version", required = false) String xAPIVersion
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"numberOfAllowedSubscriptions\" : 5, \"monetization\" : { \"billProcessing\" : \"API_CALL\", \"unitLabel\" : \"unitLabel\", \"revenueModel\" : \"ONETIME\", \"prices\" : [ { \"matchingCriteria\" : [ { \"criteria\" : [ { \"id\" : \"id\", \"key\" : \"key\" }, { \"id\" : \"id\", \"key\" : \"key\" } ], \"api\" : \"api\" }, { \"criteria\" : [ { \"id\" : \"id\", \"key\" : \"key\" }, { \"id\" : \"id\", \"key\" : \"key\" } ], \"api\" : \"api\" } ], \"amount\" : 5.637376656633329, \"default\" : true, \"tiers\" : [ { \"perCall\" : 9.301444243932576, \"min\" : 2.3021358869347655, \"max\" : 7.061401241503109, \"flatFee\" : 3.616076749251911 }, { \"perCall\" : 9.301444243932576, \"min\" : 2.3021358869347655, \"max\" : 7.061401241503109, \"flatFee\" : 3.616076749251911 } ], \"includesTax\" : true, \"lookupKey\" : \"lookupKey\", \"meterId\" : \"meterId\", \"integrationId\" : \"integrationId\", \"active\" : true, \"currency\" : \"currency\", \"overageIntegrationId\" : \"overageIntegrationId\", \"labelOverrides\" : { \"detailsText\" : \"detailsText\", \"ctaOverrideText\" : \"ctaOverrideText\", \"trailingText\" : \"trailingText\", \"mainText\" : \"mainText\", \"detailsTitle\" : \"detailsTitle\", \"ctaOverrideUrl\" : \"ctaOverrideUrl\", \"leadingText\" : \"leadingText\" } }, { \"matchingCriteria\" : [ { \"criteria\" : [ { \"id\" : \"id\", \"key\" : \"key\" }, { \"id\" : \"id\", \"key\" : \"key\" } ], \"api\" : \"api\" }, { \"criteria\" : [ { \"id\" : \"id\", \"key\" : \"key\" }, { \"id\" : \"id\", \"key\" : \"key\" } ], \"api\" : \"api\" } ], \"amount\" : 5.637376656633329, \"default\" : true, \"tiers\" : [ { \"perCall\" : 9.301444243932576, \"min\" : 2.3021358869347655, \"max\" : 7.061401241503109, \"flatFee\" : 3.616076749251911 }, { \"perCall\" : 9.301444243932576, \"min\" : 2.3021358869347655, \"max\" : 7.061401241503109, \"flatFee\" : 3.616076749251911 } ], \"includesTax\" : true, \"lookupKey\" : \"lookupKey\", \"meterId\" : \"meterId\", \"integrationId\" : \"integrationId\", \"active\" : true, \"currency\" : \"currency\", \"overageIntegrationId\" : \"overageIntegrationId\", \"labelOverrides\" : { \"detailsText\" : \"detailsText\", \"ctaOverrideText\" : \"ctaOverrideText\", \"trailingText\" : \"trailingText\", \"mainText\" : \"mainText\", \"detailsTitle\" : \"detailsTitle\", \"ctaOverrideUrl\" : \"ctaOverrideUrl\", \"leadingText\" : \"leadingText\" } } ], \"cycle\" : \"MONTH\", \"defined\" : true }, \"description\" : \"description\", \"propertiesTabName\" : \"propertiesTabName\", \"duration\" : 1, \"securityLevel\" : \"BASIC_API_KEY\", \"features\" : [ { \"ref\" : { \"id\" : \"{}\" }, \"value\" : \"value\" }, { \"ref\" : { \"id\" : \"{}\" }, \"value\" : \"value\" } ], \"documentationPublic\" : true, \"enableUsageEvents\" : true, \"id\" : \"{}\", \"order\" : 6, \"product\" : { \"id\" : \"{}\" }, \"approvalGroupIdRef\" : \"approvalGroupIdRef\", \"propertiesDescription\" : \"propertiesDescription\", \"rateLimit\" : { \"type\" : \"KONG\" }, \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"documentations\" : [ { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] }, { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] } ], \"integrationId\" : \"integrationId\", \"documentationLevel\" : \"PLAN\", \"version\" : 0, \"customProperties\" : [ { \"includeInSubscriptionWizard\" : true, \"display\" : \"display\", \"description\" : \"description\", \"readOnly\" : true, \"id\" : \"{}\", \"type\" : \"STRING\", \"required\" : true }, { \"includeInSubscriptionWizard\" : true, \"display\" : \"display\", \"description\" : \"description\", \"readOnly\" : true, \"id\" : \"{}\", \"type\" : \"STRING\", \"required\" : true } ], \"apis\" : [ { \"documentations\" : [ { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] }, { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] } ], \"name\" : \"name\", \"resources\" : [ { \"path\" : \"path\", \"method\" : \"method\", \"integrationId\" : \"integrationId\" }, { \"path\" : \"path\", \"method\" : \"method\", \"integrationId\" : \"integrationId\" } ], \"integrationId\" : \"integrationId\", \"serviceIntegrationId\" : \"serviceIntegrationId\", \"type\" : \"KONG\", \"url\" : \"url\" }, { \"documentations\" : [ { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] }, { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] } ], \"name\" : \"name\", \"resources\" : [ { \"path\" : \"path\", \"method\" : \"method\", \"integrationId\" : \"integrationId\" }, { \"path\" : \"path\", \"method\" : \"method\", \"integrationId\" : \"integrationId\" } ], \"integrationId\" : \"integrationId\", \"serviceIntegrationId\" : \"serviceIntegrationId\", \"type\" : \"KONG\", \"url\" : \"url\" } ], \"name\" : \"name\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\", \"gateway\" : { \"id\" : \"{}\" }, \"status\" : \"INACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/plans/{id} : Get the plan by the plan id
     * This endpoint will return the plan details if the user has the authority to view the plan
     *
     * @param id Plan ID (required)
     * @param xAPIVersion  (optional)
     * @return The plan was not found. (status code 404)
     *         or The details about the documentation on this plan (status code 200)
     */
    @Operation(
        operationId = "findById21",
        summary = "Get the plan by the plan id",
        tags = { "Plans" },
        responses = {
            @ApiResponse(responseCode = "404", description = "The plan was not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotFoundException.class))
            }),
            @ApiResponse(responseCode = "200", description = "The details about the documentation on this plan", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FindById21200Response.class))
            })
        },
        security = {
            @SecurityRequirement(name = "oauth-cc", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/plans/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<FindById21200Response> findById21(
        @Parameter(name = "id", description = "Plan ID", required = true) @PathVariable("id") String id,
        @Parameter(name = "X-API-Version", description = "") @RequestHeader(value = "X-API-Version", required = false) String xAPIVersion
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/plans/product/{productId} : Get list of plans of a product
     * Get a list of all plans that belong to a specified product. Each plan includes detailed information such as the plan ID, name, description, and associated APIs. The results of this endpoint are identical to the results of the /api/plans endpoint when using search query &#x60;product.id.match&#x3D;{id}&#x60; with the difference that the results from this endpoint are not paginated.
     *
     * @param productId Product ID (required)
     * @param xAPIVersion  (optional)
     * @return Lists all plans that belong to the specified product (status code 200)
     */
    @Operation(
        operationId = "findByProductId",
        summary = "Get list of plans of a product",
        tags = { "Plans" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lists all plans that belong to the specified product", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Plan.class))
            })
        },
        security = {
            @SecurityRequirement(name = "oauth-cc", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/plans/product/{productId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Plan> findByProductId(
        @Parameter(name = "productId", description = "Product ID", required = true) @PathVariable("productId") String productId,
        @Parameter(name = "X-API-Version", description = "") @RequestHeader(value = "X-API-Version", required = false) String xAPIVersion
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"numberOfAllowedSubscriptions\" : 5, \"monetization\" : { \"billProcessing\" : \"API_CALL\", \"unitLabel\" : \"unitLabel\", \"revenueModel\" : \"ONETIME\", \"prices\" : [ { \"matchingCriteria\" : [ { \"criteria\" : [ { \"id\" : \"id\", \"key\" : \"key\" }, { \"id\" : \"id\", \"key\" : \"key\" } ], \"api\" : \"api\" }, { \"criteria\" : [ { \"id\" : \"id\", \"key\" : \"key\" }, { \"id\" : \"id\", \"key\" : \"key\" } ], \"api\" : \"api\" } ], \"amount\" : 5.637376656633329, \"default\" : true, \"tiers\" : [ { \"perCall\" : 9.301444243932576, \"min\" : 2.3021358869347655, \"max\" : 7.061401241503109, \"flatFee\" : 3.616076749251911 }, { \"perCall\" : 9.301444243932576, \"min\" : 2.3021358869347655, \"max\" : 7.061401241503109, \"flatFee\" : 3.616076749251911 } ], \"includesTax\" : true, \"lookupKey\" : \"lookupKey\", \"meterId\" : \"meterId\", \"integrationId\" : \"integrationId\", \"active\" : true, \"currency\" : \"currency\", \"overageIntegrationId\" : \"overageIntegrationId\", \"labelOverrides\" : { \"detailsText\" : \"detailsText\", \"ctaOverrideText\" : \"ctaOverrideText\", \"trailingText\" : \"trailingText\", \"mainText\" : \"mainText\", \"detailsTitle\" : \"detailsTitle\", \"ctaOverrideUrl\" : \"ctaOverrideUrl\", \"leadingText\" : \"leadingText\" } }, { \"matchingCriteria\" : [ { \"criteria\" : [ { \"id\" : \"id\", \"key\" : \"key\" }, { \"id\" : \"id\", \"key\" : \"key\" } ], \"api\" : \"api\" }, { \"criteria\" : [ { \"id\" : \"id\", \"key\" : \"key\" }, { \"id\" : \"id\", \"key\" : \"key\" } ], \"api\" : \"api\" } ], \"amount\" : 5.637376656633329, \"default\" : true, \"tiers\" : [ { \"perCall\" : 9.301444243932576, \"min\" : 2.3021358869347655, \"max\" : 7.061401241503109, \"flatFee\" : 3.616076749251911 }, { \"perCall\" : 9.301444243932576, \"min\" : 2.3021358869347655, \"max\" : 7.061401241503109, \"flatFee\" : 3.616076749251911 } ], \"includesTax\" : true, \"lookupKey\" : \"lookupKey\", \"meterId\" : \"meterId\", \"integrationId\" : \"integrationId\", \"active\" : true, \"currency\" : \"currency\", \"overageIntegrationId\" : \"overageIntegrationId\", \"labelOverrides\" : { \"detailsText\" : \"detailsText\", \"ctaOverrideText\" : \"ctaOverrideText\", \"trailingText\" : \"trailingText\", \"mainText\" : \"mainText\", \"detailsTitle\" : \"detailsTitle\", \"ctaOverrideUrl\" : \"ctaOverrideUrl\", \"leadingText\" : \"leadingText\" } } ], \"cycle\" : \"MONTH\", \"defined\" : true }, \"description\" : \"description\", \"propertiesTabName\" : \"propertiesTabName\", \"duration\" : 1, \"securityLevel\" : \"BASIC_API_KEY\", \"features\" : [ { \"ref\" : { \"id\" : \"{}\" }, \"value\" : \"value\" }, { \"ref\" : { \"id\" : \"{}\" }, \"value\" : \"value\" } ], \"documentationPublic\" : true, \"enableUsageEvents\" : true, \"id\" : \"{}\", \"order\" : 6, \"product\" : { \"id\" : \"{}\" }, \"approvalGroupIdRef\" : \"approvalGroupIdRef\", \"propertiesDescription\" : \"propertiesDescription\", \"rateLimit\" : { \"type\" : \"KONG\" }, \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"documentations\" : [ { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] }, { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] } ], \"integrationId\" : \"integrationId\", \"documentationLevel\" : \"PLAN\", \"version\" : 0, \"customProperties\" : [ { \"includeInSubscriptionWizard\" : true, \"display\" : \"display\", \"description\" : \"description\", \"readOnly\" : true, \"id\" : \"{}\", \"type\" : \"STRING\", \"required\" : true }, { \"includeInSubscriptionWizard\" : true, \"display\" : \"display\", \"description\" : \"description\", \"readOnly\" : true, \"id\" : \"{}\", \"type\" : \"STRING\", \"required\" : true } ], \"apis\" : [ { \"documentations\" : [ { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] }, { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] } ], \"name\" : \"name\", \"resources\" : [ { \"path\" : \"path\", \"method\" : \"method\", \"integrationId\" : \"integrationId\" }, { \"path\" : \"path\", \"method\" : \"method\", \"integrationId\" : \"integrationId\" } ], \"integrationId\" : \"integrationId\", \"serviceIntegrationId\" : \"serviceIntegrationId\", \"type\" : \"KONG\", \"url\" : \"url\" }, { \"documentations\" : [ { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] }, { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] } ], \"name\" : \"name\", \"resources\" : [ { \"path\" : \"path\", \"method\" : \"method\", \"integrationId\" : \"integrationId\" }, { \"path\" : \"path\", \"method\" : \"method\", \"integrationId\" : \"integrationId\" } ], \"integrationId\" : \"integrationId\", \"serviceIntegrationId\" : \"serviceIntegrationId\", \"type\" : \"KONG\", \"url\" : \"url\" } ], \"name\" : \"name\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\", \"gateway\" : { \"id\" : \"{}\" }, \"status\" : \"INACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/plans/{id}/docs/overview : Get the plan documentation by the plan id
     * Returns all documentation objects that exist on the plan. The returned overview includes both plan level and API level documentation.
     *
     * @param id The plan id (required)
     * @param xAPIVersion  (optional)
     * @return The details about the documentation on this plan (status code 200)
     */
    @Operation(
        operationId = "getById",
        summary = "Get the plan documentation by the plan id",
        tags = { "Plans" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The details about the documentation on this plan", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PlanDocDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "oauth-cc", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/plans/{id}/docs/overview",
        produces = { "application/json" }
    )
    default ResponseEntity<List<PlanDocDetails>> getById(
        @Parameter(name = "id", description = "The plan id", required = true) @PathVariable("id") String id,
        @Parameter(name = "X-API-Version", description = "") @RequestHeader(value = "X-API-Version", required = false) String xAPIVersion
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"documentationPublic\" : true, \"apiLevelDocs\" : [ { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] }, { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] } ], \"documentationLevel\" : \"PLAN\", \"id\" : \"id\", \"planLevelDocs\" : [ { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] }, { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/plans/apis/{integrationId}/docs/{docId} : Get the api-level doc of all apis specified by the API integrationId
     * This endpoint will return the api-level doc of the specified api across all plans
     *
     * @param integrationId The API integrationId (required)
     * @param docId The documentation id (required)
     * @param xAPIVersion  (optional)
     * @return The specified documentation for the specified APIs across all plans (status code 200)
     */
    @Operation(
        operationId = "getDocOfApiByIntegrationId1",
        summary = "Get the api-level doc of all apis specified by the API integrationId",
        tags = { "Plans" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The specified documentation for the specified APIs across all plans", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DocumentationVersion.class))
            })
        },
        security = {
            @SecurityRequirement(name = "oauth-cc", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/plans/apis/{integrationId}/docs/{docId}",
        produces = { "application/json" }
    )
    default ResponseEntity<DocumentationVersion> getDocOfApiByIntegrationId1(
        @Parameter(name = "integrationId", description = "The API integrationId", required = true) @PathVariable("integrationId") String integrationId,
        @Parameter(name = "docId", description = "The documentation id", required = true) @PathVariable("docId") String docId,
        @Parameter(name = "X-API-Version", description = "") @RequestHeader(value = "X-API-Version", required = false) String xAPIVersion
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/plans/{id}/apis/{integrationId}/docs/{docId} : Get the api-level doc of all apis specified by the API integrationId
     * This endpoint will return the api-level doc of the specified api in the plan
     *
     * @param id The plan id (required)
     * @param integrationId The API integrationId (required)
     * @param docId The documentation id (required)
     * @param xAPIVersion  (optional)
     * @return The specified documentation for the specified APIs in the plan (status code 200)
     */
    @Operation(
        operationId = "getDocOfApiByIntegrationIdAndPlanId1",
        summary = "Get the api-level doc of all apis specified by the API integrationId",
        tags = { "Plans" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The specified documentation for the specified APIs in the plan", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DocumentationVersion.class))
            })
        },
        security = {
            @SecurityRequirement(name = "oauth-cc", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/plans/{id}/apis/{integrationId}/docs/{docId}",
        produces = { "application/json" }
    )
    default ResponseEntity<DocumentationVersion> getDocOfApiByIntegrationIdAndPlanId1(
        @Parameter(name = "id", description = "The plan id", required = true) @PathVariable("id") String id,
        @Parameter(name = "integrationId", description = "The API integrationId", required = true) @PathVariable("integrationId") String integrationId,
        @Parameter(name = "docId", description = "The documentation id", required = true) @PathVariable("docId") String docId,
        @Parameter(name = "X-API-Version", description = "") @RequestHeader(value = "X-API-Version", required = false) String xAPIVersion
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/plans/{id}/docs/{docId} : Get the plan-level doc of the plan specified by the plan id
     * This endpoint will return the plan-level doc of the specified plan
     *
     * @param id The plan id (required)
     * @param docId The documentation id (required)
     * @param xAPIVersion  (optional)
     * @return The specified plan-level documentation for the specified plan (status code 200)
     */
    @Operation(
        operationId = "getDocOfPlanById1",
        summary = "Get the plan-level doc of the plan specified by the plan id",
        tags = { "Plans" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The specified plan-level documentation for the specified plan", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DocumentationVersion.class))
            })
        },
        security = {
            @SecurityRequirement(name = "oauth-cc", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/plans/{id}/docs/{docId}",
        produces = { "application/json" }
    )
    default ResponseEntity<DocumentationVersion> getDocOfPlanById1(
        @Parameter(name = "id", description = "The plan id", required = true) @PathVariable("id") String id,
        @Parameter(name = "docId", description = "The documentation id", required = true) @PathVariable("docId") String docId,
        @Parameter(name = "X-API-Version", description = "") @RequestHeader(value = "X-API-Version", required = false) String xAPIVersion
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/plans/apis/{integrationId}/docs : Get the api-level docs of all apis specified by the API integrationId of all plans
     * This endpoint will return the api-level docs of the specified api across all plans
     *
     * @param integrationId The documentation id (required)
     * @param xAPIVersion  (optional)
     * @return A list of api-level documentation for the specified APIs across all plans (status code 200)
     */
    @Operation(
        operationId = "getDocsOfApiByIntegrationId1",
        summary = "Get the api-level docs of all apis specified by the API integrationId of all plans",
        tags = { "Plans" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of api-level documentation for the specified APIs across all plans", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DocumentationVersion.class))
            })
        },
        security = {
            @SecurityRequirement(name = "oauth-cc", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/plans/apis/{integrationId}/docs",
        produces = { "application/json" }
    )
    default ResponseEntity<List<DocumentationVersion>> getDocsOfApiByIntegrationId1(
        @Parameter(name = "integrationId", description = "The documentation id", required = true) @PathVariable("integrationId") String integrationId,
        @Parameter(name = "X-API-Version", description = "") @RequestHeader(value = "X-API-Version", required = false) String xAPIVersion
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/plans/{id}/apis/{integrationId}/docs : Get the api-level docs of all apis specified by the API integrationId in the plan
     * This endpoint will return the api-level docs of the specified api in the plan
     *
     * @param id The plan id (required)
     * @param integrationId The API integrationId (required)
     * @param xAPIVersion  (optional)
     * @return A list of api-level documentation for the specified APIs in the plan (status code 200)
     */
    @Operation(
        operationId = "getDocsOfApiByIntegrationIdAndPlanId1",
        summary = "Get the api-level docs of all apis specified by the API integrationId in the plan",
        tags = { "Plans" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of api-level documentation for the specified APIs in the plan", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DocumentationVersion.class))
            })
        },
        security = {
            @SecurityRequirement(name = "oauth-cc", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/plans/{id}/apis/{integrationId}/docs",
        produces = { "application/json" }
    )
    default ResponseEntity<List<DocumentationVersion>> getDocsOfApiByIntegrationIdAndPlanId1(
        @Parameter(name = "id", description = "The plan id", required = true) @PathVariable("id") String id,
        @Parameter(name = "integrationId", description = "The API integrationId", required = true) @PathVariable("integrationId") String integrationId,
        @Parameter(name = "X-API-Version", description = "") @RequestHeader(value = "X-API-Version", required = false) String xAPIVersion
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/plans/{id}/docs : Get the plan-level docs of the plan specified by the plan id
     * This endpoint will return the plan-level docs of the specified plan
     *
     * @param id The plan id (required)
     * @param xAPIVersion  (optional)
     * @return A list of plan-leve documentation for the specified plan (status code 200)
     */
    @Operation(
        operationId = "getDocsOfPlanById1",
        summary = "Get the plan-level docs of the plan specified by the plan id",
        tags = { "Plans" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of plan-leve documentation for the specified plan", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DocumentationVersion.class))
            })
        },
        security = {
            @SecurityRequirement(name = "oauth-cc", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/plans/{id}/docs",
        produces = { "application/json" }
    )
    default ResponseEntity<List<DocumentationVersion>> getDocsOfPlanById1(
        @Parameter(name = "id", description = "The plan id", required = true) @PathVariable("id") String id,
        @Parameter(name = "X-API-Version", description = "") @RequestHeader(value = "X-API-Version", required = false) String xAPIVersion
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /api/plans/apis/{integrationId}/docs/{docId} : Patch the api-level doc
     * The supported operation is replace, and the supported paths are url, version, name
     *
     * @param integrationId The API integrationId (required)
     * @param docId The documentation id (required)
     * @param patchObject  (required)
     * @param xAPIVersion  (optional)
     * @return The updated documentation (status code 200)
     */
    @Operation(
        operationId = "patchDocByApiIntegrationId1",
        summary = "Patch the api-level doc",
        tags = { "Plans" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The updated documentation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DocumentationVersion.class))
            })
        },
        security = {
            @SecurityRequirement(name = "oauth-cc", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/plans/apis/{integrationId}/docs/{docId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<DocumentationVersion> patchDocByApiIntegrationId1(
        @Parameter(name = "integrationId", description = "The API integrationId", required = true) @PathVariable("integrationId") String integrationId,
        @Parameter(name = "docId", description = "The documentation id", required = true) @PathVariable("docId") String docId,
        @Parameter(name = "PatchObject", description = "", required = true) @Valid @RequestBody List<PatchObject> patchObject,
        @Parameter(name = "X-API-Version", description = "") @RequestHeader(value = "X-API-Version", required = false) String xAPIVersion
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /api/plans/{id}/docs/{docId} : Patch the plan-level doc
     * The supported operation is replace, and the supported paths are url, version, name
     *
     * @param id The plan id (required)
     * @param docId The documentation id (required)
     * @param patchObject  (required)
     * @param xAPIVersion  (optional)
     * @return The updated documentation (status code 200)
     */
    @Operation(
        operationId = "patchDocByPlanId1",
        summary = "Patch the plan-level doc",
        tags = { "Plans" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The updated documentation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DocumentationVersion.class))
            })
        },
        security = {
            @SecurityRequirement(name = "oauth-cc", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/plans/{id}/docs/{docId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<DocumentationVersion> patchDocByPlanId1(
        @Parameter(name = "id", description = "The plan id", required = true) @PathVariable("id") String id,
        @Parameter(name = "docId", description = "The documentation id", required = true) @PathVariable("docId") String docId,
        @Parameter(name = "PatchObject", description = "", required = true) @Valid @RequestBody List<PatchObject> patchObject,
        @Parameter(name = "X-API-Version", description = "") @RequestHeader(value = "X-API-Version", required = false) String xAPIVersion
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /api/plans/{id}/apis/{integrationId}/docs/{docId} : Patch the api-level doc
     * The supported operation is replace, and the supported paths are url, version, name
     *
     * @param id The plan id (required)
     * @param integrationId The API integrationId (required)
     * @param docId The documentation id (required)
     * @param patchObject  (required)
     * @param xAPIVersion  (optional)
     * @return The updated documentation (status code 200)
     */
    @Operation(
        operationId = "patchDocByPlanIdAndApiIntegrationId1",
        summary = "Patch the api-level doc",
        tags = { "Plans" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The updated documentation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DocumentationVersion.class))
            })
        },
        security = {
            @SecurityRequirement(name = "oauth-cc", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/plans/{id}/apis/{integrationId}/docs/{docId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<DocumentationVersion> patchDocByPlanIdAndApiIntegrationId1(
        @Parameter(name = "id", description = "The plan id", required = true) @PathVariable("id") String id,
        @Parameter(name = "integrationId", description = "The API integrationId", required = true) @PathVariable("integrationId") String integrationId,
        @Parameter(name = "docId", description = "The documentation id", required = true) @PathVariable("docId") String docId,
        @Parameter(name = "PatchObject", description = "", required = true) @Valid @RequestBody List<PatchObject> patchObject,
        @Parameter(name = "X-API-Version", description = "") @RequestHeader(value = "X-API-Version", required = false) String xAPIVersion
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/plans/{id}/resources : Read list of API resources for a plan by plan ID
     * Returns a list of API resources that belong to the specified plan. Each resource includes detailed information such as the resource ID, name, description, and associated APIs.
     *
     * @param id  (required)
     * @param xAPIVersion  (optional)
     * @return Lists all resources that belong to the specified plan (status code 200)
     */
    @Operation(
        operationId = "readResources",
        summary = "Read list of API resources for a plan by plan ID",
        tags = { "Plans" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lists all resources that belong to the specified plan", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Plan.class))
            })
        },
        security = {
            @SecurityRequirement(name = "oauth-cc", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/plans/{id}/resources",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Plan>> readResources(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") String id,
        @Parameter(name = "X-API-Version", description = "") @RequestHeader(value = "X-API-Version", required = false) String xAPIVersion
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"numberOfAllowedSubscriptions\" : 5, \"monetization\" : { \"billProcessing\" : \"API_CALL\", \"unitLabel\" : \"unitLabel\", \"revenueModel\" : \"ONETIME\", \"prices\" : [ { \"matchingCriteria\" : [ { \"criteria\" : [ { \"id\" : \"id\", \"key\" : \"key\" }, { \"id\" : \"id\", \"key\" : \"key\" } ], \"api\" : \"api\" }, { \"criteria\" : [ { \"id\" : \"id\", \"key\" : \"key\" }, { \"id\" : \"id\", \"key\" : \"key\" } ], \"api\" : \"api\" } ], \"amount\" : 5.637376656633329, \"default\" : true, \"tiers\" : [ { \"perCall\" : 9.301444243932576, \"min\" : 2.3021358869347655, \"max\" : 7.061401241503109, \"flatFee\" : 3.616076749251911 }, { \"perCall\" : 9.301444243932576, \"min\" : 2.3021358869347655, \"max\" : 7.061401241503109, \"flatFee\" : 3.616076749251911 } ], \"includesTax\" : true, \"lookupKey\" : \"lookupKey\", \"meterId\" : \"meterId\", \"integrationId\" : \"integrationId\", \"active\" : true, \"currency\" : \"currency\", \"overageIntegrationId\" : \"overageIntegrationId\", \"labelOverrides\" : { \"detailsText\" : \"detailsText\", \"ctaOverrideText\" : \"ctaOverrideText\", \"trailingText\" : \"trailingText\", \"mainText\" : \"mainText\", \"detailsTitle\" : \"detailsTitle\", \"ctaOverrideUrl\" : \"ctaOverrideUrl\", \"leadingText\" : \"leadingText\" } }, { \"matchingCriteria\" : [ { \"criteria\" : [ { \"id\" : \"id\", \"key\" : \"key\" }, { \"id\" : \"id\", \"key\" : \"key\" } ], \"api\" : \"api\" }, { \"criteria\" : [ { \"id\" : \"id\", \"key\" : \"key\" }, { \"id\" : \"id\", \"key\" : \"key\" } ], \"api\" : \"api\" } ], \"amount\" : 5.637376656633329, \"default\" : true, \"tiers\" : [ { \"perCall\" : 9.301444243932576, \"min\" : 2.3021358869347655, \"max\" : 7.061401241503109, \"flatFee\" : 3.616076749251911 }, { \"perCall\" : 9.301444243932576, \"min\" : 2.3021358869347655, \"max\" : 7.061401241503109, \"flatFee\" : 3.616076749251911 } ], \"includesTax\" : true, \"lookupKey\" : \"lookupKey\", \"meterId\" : \"meterId\", \"integrationId\" : \"integrationId\", \"active\" : true, \"currency\" : \"currency\", \"overageIntegrationId\" : \"overageIntegrationId\", \"labelOverrides\" : { \"detailsText\" : \"detailsText\", \"ctaOverrideText\" : \"ctaOverrideText\", \"trailingText\" : \"trailingText\", \"mainText\" : \"mainText\", \"detailsTitle\" : \"detailsTitle\", \"ctaOverrideUrl\" : \"ctaOverrideUrl\", \"leadingText\" : \"leadingText\" } } ], \"cycle\" : \"MONTH\", \"defined\" : true }, \"description\" : \"description\", \"propertiesTabName\" : \"propertiesTabName\", \"duration\" : 1, \"securityLevel\" : \"BASIC_API_KEY\", \"features\" : [ { \"ref\" : { \"id\" : \"{}\" }, \"value\" : \"value\" }, { \"ref\" : { \"id\" : \"{}\" }, \"value\" : \"value\" } ], \"documentationPublic\" : true, \"enableUsageEvents\" : true, \"id\" : \"{}\", \"order\" : 6, \"product\" : { \"id\" : \"{}\" }, \"approvalGroupIdRef\" : \"approvalGroupIdRef\", \"propertiesDescription\" : \"propertiesDescription\", \"rateLimit\" : { \"type\" : \"KONG\" }, \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"documentations\" : [ { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] }, { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] } ], \"integrationId\" : \"integrationId\", \"documentationLevel\" : \"PLAN\", \"version\" : 0, \"customProperties\" : [ { \"includeInSubscriptionWizard\" : true, \"display\" : \"display\", \"description\" : \"description\", \"readOnly\" : true, \"id\" : \"{}\", \"type\" : \"STRING\", \"required\" : true }, { \"includeInSubscriptionWizard\" : true, \"display\" : \"display\", \"description\" : \"description\", \"readOnly\" : true, \"id\" : \"{}\", \"type\" : \"STRING\", \"required\" : true } ], \"apis\" : [ { \"documentations\" : [ { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] }, { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] } ], \"name\" : \"name\", \"resources\" : [ { \"path\" : \"path\", \"method\" : \"method\", \"integrationId\" : \"integrationId\" }, { \"path\" : \"path\", \"method\" : \"method\", \"integrationId\" : \"integrationId\" } ], \"integrationId\" : \"integrationId\", \"serviceIntegrationId\" : \"serviceIntegrationId\", \"type\" : \"KONG\", \"url\" : \"url\" }, { \"documentations\" : [ { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] }, { \"retrievalType\" : \"MANUAL\", \"visible\" : true, \"synced\" : \"2000-01-23T04:56:07.000+00:00\", \"active\" : true, \"version\" : \"version\", \"url\" : \"url\", \"planDocLevel\" : \"PLAN\", \"apiIntegrationId\" : \"apiIntegrationId\", \"name\" : \"name\", \"planId\" : \"{}\", \"id\" : \"{}\", \"order\" : 0, \"status\" : [ \"status\", \"status\" ] } ], \"name\" : \"name\", \"resources\" : [ { \"path\" : \"path\", \"method\" : \"method\", \"integrationId\" : \"integrationId\" }, { \"path\" : \"path\", \"method\" : \"method\", \"integrationId\" : \"integrationId\" } ], \"integrationId\" : \"integrationId\", \"serviceIntegrationId\" : \"serviceIntegrationId\", \"type\" : \"KONG\", \"url\" : \"url\" } ], \"name\" : \"name\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\", \"gateway\" : { \"id\" : \"{}\" }, \"status\" : \"INACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
